First Slide
author:
date:
autosize: true
---
s
summary(mcars)
summary(cars)
title: "ioslides"
output: ioslides_presentation
---
-  Monitoring
knit_with_parameters('~/GitHub/fire-ants-mtgs/fire-ants-mtg01.Rmd')
setwd("~/GitHub/pitch_fx")
source("process_data.R")
install.packages(rvest)
install.packages('rvest)
install.packages("rvest")
source("process_data.R")
install.packages("plyr")
install.packages("dplyr")
source("process_data.R")
knit_with_parameters('~/GitHub/fire-ants-mtgs/fire-ants-mtg02.Rmd')
:
round(pnorm(93, mean=100, sd=10))
round(pnorm(93, mean=100, sd=10)*100)
head(mtcars)
knit_with_parameters('~/GitHub/mlb-admin/fire-ants-mtg09.Rmd')
- FS / SI / SF = fastball (sinker, split-fingered)
library(manipulate)
myHist<-function(mu){
hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
install.packages("manipulate")
install.packages("manipulate")
library("manipulate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(manipulate)
myHist<-function(mu){
hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))
}
myHist<-function(mu) {
hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
myHist<-function(mu) {
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
data(galton)
library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data(galton)
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
install.packages("pitchRX")
install.packages(pitchRX)
install.packages('pitchRX')
library(pitchRx)
?glm
install.packages("rattle")
source(rattle/R/rpart.R)
install.packages("rattle")
session.info()
sessionInfo()
localCRAN <- path.expand("~/local-cran")
dir.create(localCRAN)
contribDir <- file.path(localCRAN, "src", "contrib")
dir.create(contribDir, recursive = TRUE)
rVersion <- paste(unlist(getRversion())[1:2], collapse = ".")
rVersion
binPaths <- list(
win.binary = file.path("bin/windows/contrib", rVersion),
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPaths <- lapply(binPaths, function(x) file.path(localCRAN, x))
lapply(binPaths, function(path) {
dir.create(path, recursive = TRUE)
})
sashimiDescPath <- file.path(tempdir(), "sashimi", "DESCRIPTION")
cat("Repository: sushi", file = sashimiDescPath, append = TRUE, sep = "\n")
tempdir()
localCRAN <- path.expand("~/local-cran")
dir.create(localCRAN)
tmpdir()
tempdir()
localCRAN <- path.expand("~/local-cran")
dir.create(localCRAN)
contribDir <- file.path(localCRAN, "src", "contrib")
dir.create(contribDir, recursive = TRUE)
rVersion <- paste(unlist(getRversion())[1:2], collapse = ".")
binPaths <- list(
win.binary = file.path("bin/windows/contrib", rVersion),
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPaths <- lapply(binPaths, function(x) file.path(localCRAN, x))
lapply(binPaths, function(path) {
dir.create(path, recursive = TRUE)
})
sashimiDescPath <- file.path(tempdir(), "sashimi", "DESCRIPTION")
cat("Repository: sushi", file = sashimiDescPath, append = TRUE, sep = "\n")
if (!require("pkgKitten")) {
install.packages("pkgKitten")
require("pkgKitten")
}
kitten("sashimi", path = tempdir())
pkgDir <- file.path(tempdir(), "sashimi")
sashimiDescPath <- file.path(tempdir(), "sashimi", "DESCRIPTION")
cat("Repository: sushi", file = sashimiDescPath, append = TRUE, sep = "\n")
# Go to the temporary directory and build 'sashimi'
owd <- getwd()
setwd(tempdir())
system("R CMD build sashimi")
setwd(owd)
# Copy it to the 'src/contrib' sub-directory
file.copy(
file.path(tempdir(), "sashimi_1.0.tar.gz"),
file.path(contribDir, "sashimi_1.0.tar.gz")
)
localCRAN <- path.expand("~/local-cran")
dir.create(localCRAN)
contribDir <- file.path(localCRAN, "src", "contrib")
dir.create(contribDir, recursive = TRUE)
rVersion <- paste(unlist(getRversion())[1:2], collapse = ".")
binPaths <- list(
win.binary = file.path("bin/windows/contrib", rVersion),
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPaths <- lapply(binPaths, function(x) file.path(localCRAN, x))
lapply(binPaths, function(path) {
dir.create(path, recursive = TRUE)
})
if (!require("pkgKitten")) {
install.packages("pkgKitten")
require("pkgKitten")
}
??kitten
tools::write_PACKAGES(contribDir, type = "source")
lapply(binPaths, function(path) {
tools::write_PACKAGES(path)
})
install.packages("devtools")
library(devtools)
install_github("cpsievert/pitchRx", force = T)
library(pitchRx)    ## thank you Carson Sievert!!!
dat160501 <- scrape(start = "2016-05-01", end = "2016-05-01", suffix = "inning/inning_all.xml")
warnings()
library("assertthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:pitchRx", unload=TRUE)
library("pitchRx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::load_all(".")
localCRAN <- path.expand("~/local-cran")
dir.create(localCRAN)
contribDir <- file.path(localCRAN, "src", "contrib")
dir.create(contribDir, recursive = TRUE)
rVersion <- paste(unlist(getRversion())[1:2], collapse = ".")
binPaths <- list(
win.binary = file.path("bin/windows/contrib", rVersion),
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPaths <- lapply(binPaths, function(x) file.path(localCRAN, x))
lapply(binPaths, function(path) {
dir.create(path, recursive = TRUE)
})
if (!require("pkgKitten")) {
install.packages("pkgKitten")
require("pkgKitten")
}
kitten("sashimi", path = tempdir())
pkgDir <- file.path(tempdir(), "sashimi")
sashimiDescPath <- file.path(tempdir(), "sashimi", "DESCRIPTION")
cat("Repository: sushi", file = sashimiDescPath, append = TRUE, sep = "\n")
# Go to the temporary directory and build 'sashimi'
owd <- getwd()
setwd(tempdir())
system("R CMD build sashimi")
setwd(owd)
# Copy it to the 'src/contrib' sub-directory
file.copy(
file.path(tempdir(), "sashimi_1.0.tar.gz"),
file.path(contribDir, "sashimi_1.0.tar.gz")
)
tools::write_PACKAGES(contribDir, type = "source")
lapply(binPaths, function(path) {
tools::write_PACKAGES(path)
})
oldRepos <- getOption("repos")
cranURI <- paste("file://", normalizePath(localCRAN, winslash = "/"), sep = "")
options(repos = c(oldRepos, sushi = cranURI))
install.packages("sashimi", type = "source")
library("pitchRx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
getwd()
install.packages(/Users/jrbattles/Downloads, type = "source")
install.packages(Users/jrbattles/Downloads, type = "source")
??install.packages
install.packages(/Users/jrbattles/Downloads/pitchRx_1.8.4.tar.gz, type = "source")
install.packages("/Users/jrbattles/Downloads/pitchRx_1.8.4.tar.gz", type = "source")
version
install.packages("/Users/jrbattles/Downloads/pitchRx_1.8.4.tar.gz", type = "source")
remove.packages("pitchRx")
install.packages("/Users/jrbattles/Downloads/pitchRx_1.8.4.tar.gz", type = "source")
installed.packages()
??scrape
